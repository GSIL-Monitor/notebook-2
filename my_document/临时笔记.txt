apache kylin 特点
	万亿数据实现秒级查询
	高并发

数据源hive、kafka
预处理
	mr job
	spark job（spark是在kylin2.0引入的）
	
	kv的format，load到hbase中

先与计算再后计算

一个包，找台机器放上去，不需要放到每台hadoop机器上



//////////////////////////////////////////////////////////////////////////////////


对非结构化数据顺序扫描很慢，对结构化数据的搜索却相对较快（由于结构化数据有一定的结构可以采取一定的搜索算法加快速度），那么把我们的非结构化数据想办法弄得有一定结构不就行了吗？
这种想法很天然，却构成了全文检索的基本思路，也即将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对此有一定结构的数据进行搜索，从而达到搜索相对较快的目的。

这部分从非结构化数据中提取出的然后重新组织的信息，我们称之索引 。

比如字典，字典的拼音表和部首检字表就相当于字典的索引，对每一个字的解释是非结构化的

这种先建立索引，再对索引进行搜索的过程就叫全文检索(Full-text Search) 。

全文检索大体分两个过程，索引创建 (Indexing) 和搜索索引 (Search) 。
	索引创建：将现实世界中所有的结构化和非结构化数据提取信息，创建索引的过程。
	搜索索引：就是得到用户的查询请求，搜索创建的索引，然后返回结果的过程。
	
索引库
	目录库
	内容库：
		录入的内容用 分词器 切分成关键词，放入到目录库中

倒排索引
	英文原名Inverted index，大概因为 Invert 有颠倒的意思，就被翻译成了倒排。
	但是倒排这个名称很容易让人理解为从A-Z颠倒成Z-A。
	我喜欢叫她“反向索引”
	一个未经处理的数据库中，一般是以文档ID作为索引，以文档内容作为记录。
	而Inverted index 指的是将单词或记录作为索引，将文档ID作为记录，这样便可以方便地通过单词或记录查找到其所在的文档。
